/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package menuadmin.tampilan;

/**
 *
 * @author adhwa
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import uas.Koneksi;

public class users extends javax.swing.JPanel {

    /**
     * Creates new form users
     */
    public users() {
        initComponents();
    }

    private void tampilkanData() {
        try {
            // Hubungkan ke database
            Koneksi db = new Koneksi();
            Connection conn = db.connect();

            // Query untuk mengambil data dari tabel users
            String sql = "SELECT id_user, username, email, role, nomor_telepon, alamat FROM users";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            // Buat model untuk JTable
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID User");
            model.addColumn("Username");
            model.addColumn("Email");
            model.addColumn("Role");
            model.addColumn("No Telp");
            model.addColumn("Alamat");

            // Loop hasil query dan tambahkan ke model
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("id_user"),
                    rs.getString("username"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getString("nomor_telepon"),
                    rs.getString("alamat")
                });
            }

            // Set model ke JTable
            tabeluser.setModel(model);

            // Tutup koneksi
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal menampilkan data: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabeluser = new rojerusan.RSTableMetro();
        btnsimpanuser = new rojerusan.RSButtonIconD();
        btnhapususer = new rojerusan.RSButtonIconD();
        btnedituser = new rojerusan.RSButtonIconD();
        btntambahuser = new rojerusan.RSButtonIconD();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(846, 400));

        tabeluser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id User", "Username", "Password", "Email", "role", "No Telp", "Alamat"
            }
        ));
        tabeluser.setColorBackgoundHead(new java.awt.Color(255, 204, 204));
        tabeluser.setFuenteFilas(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tabeluser.setFuenteHead(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jScrollPane1.setViewportView(tabeluser);

        btnsimpanuser.setBackground(new java.awt.Color(255, 153, 153));
        btnsimpanuser.setForeground(new java.awt.Color(0, 0, 0));
        btnsimpanuser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menuadmin/gambar/icons8-save-30.png"))); // NOI18N
        btnsimpanuser.setText("Simpan");
        btnsimpanuser.setColorHover(new java.awt.Color(255, 204, 204));
        btnsimpanuser.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnsimpanuser.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnsimpanuser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnhapususer.setBackground(new java.awt.Color(255, 153, 153));
        btnhapususer.setForeground(new java.awt.Color(0, 0, 0));
        btnhapususer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menuadmin/gambar/icons8-delete-24.png"))); // NOI18N
        btnhapususer.setText("Hapus");
        btnhapususer.setColorHover(new java.awt.Color(255, 204, 204));
        btnhapususer.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnhapususer.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnhapususer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnhapususer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhapususerActionPerformed(evt);
            }
        });

        btnedituser.setBackground(new java.awt.Color(255, 153, 153));
        btnedituser.setForeground(new java.awt.Color(0, 0, 0));
        btnedituser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menuadmin/gambar/icons8-edit-25.png"))); // NOI18N
        btnedituser.setText("Edit");
        btnedituser.setColorHover(new java.awt.Color(255, 204, 204));
        btnedituser.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnedituser.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnedituser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnedituser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnedituserActionPerformed(evt);
            }
        });

        btntambahuser.setBackground(new java.awt.Color(255, 153, 153));
        btntambahuser.setForeground(new java.awt.Color(0, 0, 0));
        btntambahuser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menuadmin/gambar/icons8-create-24.png"))); // NOI18N
        btntambahuser.setText("Tambah");
        btntambahuser.setColorHover(new java.awt.Color(255, 204, 204));
        btntambahuser.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btntambahuser.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btntambahuser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btntambahuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntambahuserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btnsimpanuser, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnhapususer, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnedituser, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btntambahuser, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(386, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnsimpanuser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnhapususer, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnedituser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btntambahuser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnedituserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnedituserActionPerformed
        try {
            // Pastikan ada baris yang dipilih
            int row = tabeluser.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Pilih data yang akan diedit!");
                return;
            }

            // Ambil data dari tabel
            String idUser = tabeluser.getValueAt(row, 0).toString();
            String currentUsername = tabeluser.getValueAt(row, 1).toString();
            String currentEmail = tabeluser.getValueAt(row, 3).toString();
            String currentRole = tabeluser.getValueAt(row, 4).toString();
            String currentNoTelp = tabeluser.getValueAt(row, 5).toString();
            String currentAlamat = tabeluser.getValueAt(row, 6).toString();

            // Ambil input baru dari pengguna
            String newUsername = JOptionPane.showInputDialog(this, "Edit Username:", currentUsername);
            if (newUsername == null || newUsername.trim().isEmpty()) {
                return;
            }

            String newEmail = JOptionPane.showInputDialog(this, "Edit Email:", currentEmail);
            if (newEmail == null || newEmail.trim().isEmpty() || !newEmail.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
                return;
            }

            String newRole = JOptionPane.showInputDialog(this, "Edit Role (admin/customer):", currentRole);
            if (newRole == null || (!newRole.equalsIgnoreCase("admin") && !newRole.equalsIgnoreCase("customer"))) {
                return;
            }

            String newNoTelp = JOptionPane.showInputDialog(this, "Edit Nomor Telepon:", currentNoTelp);
            if (newNoTelp == null || newNoTelp.trim().isEmpty() || !newNoTelp.matches("\\d+")) {
                return;
            }

            String newAlamat = JOptionPane.showInputDialog(this, "Edit Alamat:", currentAlamat);
            if (newAlamat == null || newAlamat.trim().isEmpty()) {
                return;
            }

            // Hubungkan ke database
            Koneksi db = new Koneksi();
            Connection conn = db.connect();

            // Query untuk mengupdate data
            String sql = "UPDATE users SET username = ?, email = ?, role = ?, nomor_telepon = ?, alamat = ? WHERE id_user = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);

            // Isi parameter query
            stmt.setString(1, newUsername);
            stmt.setString(2, newEmail);
            stmt.setString(3, newRole.toLowerCase());
            stmt.setString(4, newNoTelp);
            stmt.setString(5, newAlamat);
            stmt.setString(6, idUser);

            // Eksekusi query
            stmt.executeUpdate();

            // Tampilkan pesan sukses
            JOptionPane.showMessageDialog(this, "Data berhasil diubah!");

            // Refresh tabel
            tampilkanData();

            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal mengubah data: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnedituserActionPerformed

    private void btnhapususerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhapususerActionPerformed
        try {
            // Pastikan ada baris yang dipilih
            int row = tabeluser.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus!");
                return;
            }

            // Ambil ID User dari tabel
            String idUser = tabeluser.getValueAt(row, 0).toString();

            // Konfirmasi penghapusan
            int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Hubungkan ke database
                Koneksi db = new Koneksi();
                Connection conn = db.connect();

                // Query untuk menghapus data
                String sql = "DELETE FROM users WHERE id_user = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, idUser);

                // Eksekusi query
                stmt.executeUpdate();

                // Tampilkan pesan sukses
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");

                // Refresh tabel
                tampilkanData();

                conn.close();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus data: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnhapususerActionPerformed

    private void btntambahuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntambahuserActionPerformed
        try {
            // Ambil input dari pengguna melalui dialog JOptionPane
            String username = JOptionPane.showInputDialog(this, "Masukkan Username:");
            if (username == null || username.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Username tidak boleh kosong!");
                return;
            }

            String password = JOptionPane.showInputDialog(this, "Masukkan Password:");
            if (password == null || password.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Password tidak boleh kosong!");
                return;
            }

            String email = JOptionPane.showInputDialog(this, "Masukkan Email:");
            if (email == null || email.trim().isEmpty() || !email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
                JOptionPane.showMessageDialog(this, "Email tidak valid!");
                return;
            }

            String role = JOptionPane.showInputDialog(this, "Masukkan Role (admin/customer):");
            if (role == null || role.trim().isEmpty() || (!role.equalsIgnoreCase("admin") && !role.equalsIgnoreCase("customer"))) {
                JOptionPane.showMessageDialog(this, "Role harus 'admin' atau 'customer'!");
                return;
            }

            String nomorTelepon = JOptionPane.showInputDialog(this, "Masukkan Nomor Telepon:");
            if (nomorTelepon == null || nomorTelepon.trim().isEmpty() || !nomorTelepon.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Nomor telepon tidak valid!");
                return;
            }

            String alamat = JOptionPane.showInputDialog(this, "Masukkan Alamat:");
            if (alamat == null || alamat.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Alamat tidak boleh kosong!");
                return;
            }

            // Hubungkan ke database
            Koneksi db = new Koneksi();
            Connection conn = db.connect();

            // Query untuk menambahkan data baru
            String sql = "INSERT INTO users (id_user, username, password, email, role, nomor_telepon, alamat) VALUES (?, ?, MD5(?), ?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);

            // Generate ID User
            String idUser = "U" + String.format("%03d", (int) (Math.random() * 1000));

            // Isi parameter query
            stmt.setString(1, idUser);
            stmt.setString(2, username);
            stmt.setString(3, password);
            stmt.setString(4, email);
            stmt.setString(5, role.toLowerCase());
            stmt.setString(6, nomorTelepon);
            stmt.setString(7, alamat);

            // Eksekusi query
            stmt.executeUpdate();

            // Tampilkan pesan sukses
            JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!");

            // Refresh tabel
            tampilkanData();

            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal menambahkan data: " + ex.getMessage());
        }     // TODO add your handling code here:
    }//GEN-LAST:event_btntambahuserActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSButtonIconD btnedituser;
    private rojerusan.RSButtonIconD btnhapususer;
    private rojerusan.RSButtonIconD btnsimpanuser;
    private rojerusan.RSButtonIconD btntambahuser;
    private javax.swing.JScrollPane jScrollPane1;
    private rojerusan.RSTableMetro tabeluser;
    // End of variables declaration//GEN-END:variables
}
